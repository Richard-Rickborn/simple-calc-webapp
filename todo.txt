Task listings will be structured like this

"[priority] [time investment/difficulty] -task"


priority will be graded from 1 - 5, with 1 being the highest priority:
	[1**]:  Critical task, do this as soon as possible
	[2*]:	Absolutely must be done, but not very immediate or time-sensitive
	[3]:	You don't need to do this yet, but you can see it looming on the horizon
	[4]:	Eh, look into it at some point
	[5]:	No rush on this, save it for a rainy day when you don't know what else to do

time investment/difficulty will be graded on a pretty loose scale of light, medium, and hard.
	Light:  Easy and/or requiring little time, for example any kind of one-line bug fix, or adding a simple CSS hover effect to a specific element.  Light tasks are expected to take up to one pomodoro, no longer.
	
	Medium:  A pretty average task, might take a couple pomodoros but it's doable and I know how I'm going to do it, for example (with my current knowledge), a medium task might be implementing a mergesort (would have to take a few minutes to remind myself how mergesort works but I know it's not super hard) or using console.log to track down the source of some unintended side-effect.
	
	Hard:  A difficult task that either I know will be extremely time consuming, or a task that I don't even know where to start with.  With where I'm at right now in my knowledge, a hard task would be, for example, setting up a basic server with Node.js (no idea how to do that, would have to sink time into tutorials and reading docs), or rewriting/refactoring large sections of an existing codebase (I know how to do it, but it's certain to take a lot of time).




#############
## Styling ##
#############

-no tasks for now, styling seems good for the moment :)




###################
## Functionality ##
###################

-[1**] [M] Make a secondary set of event listeners for keyboard presses so that you can enter input either with the on-page buttons or with the keyboard.
-[2*] [M] Add the rest of operations buttons to btn_table
	-the only op button left is "%", which will take a [M] to implement
-[2*] [H] Look into the upper limits of the display size, eventually make it so that input is no longer accepted after display maxes out
	-The rule should probably be something like "if (getDisplayString() + currentNumber).length > some value then stop accepting inputs"
	-Make any kind of display-limit code based on a const DIGIT_LIMIT value, because as the design changes the value of DIGIT_LIMIT is going to change as well.
-[4] [M] Find a cleaner way to have buttons only work if the power's on.  Maybe make a powerIsOn() function?




###########
## OTHER ##
###########

-[2*] [M] Decide on a (soft) completion point for this project, to avoid just iterating on this one project forever instead of moving on to the next great thing.
-[3] [M] Readme is setup, but stlying for the readme is not quite working, take some time to learn how github markdown styling actually works and pretty up the readme
-[4] [H] Look at some other calc webapps for inspiration
